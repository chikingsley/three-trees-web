/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    blogPosts: BlogPost;
    classes: Class;
    clients: Client;
    counties: County;
    locations: Location;
    media: Media;
    payments: Payment;
    'program-groups': ProgramGroup;
    programTypes: ProgramType;
    programs: Program;
    'referral-sources': ReferralSource;
    'referral-source-types': ReferralSourceType;
    services: Service;
    testimonials: Testimonial;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    blogPosts: BlogPostsSelect<false> | BlogPostsSelect<true>;
    classes: ClassesSelect<false> | ClassesSelect<true>;
    clients: ClientsSelect<false> | ClientsSelect<true>;
    counties: CountiesSelect<false> | CountiesSelect<true>;
    locations: LocationsSelect<false> | LocationsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    payments: PaymentsSelect<false> | PaymentsSelect<true>;
    'program-groups': ProgramGroupsSelect<false> | ProgramGroupsSelect<true>;
    programTypes: ProgramTypesSelect<false> | ProgramTypesSelect<true>;
    programs: ProgramsSelect<false> | ProgramsSelect<true>;
    'referral-sources': ReferralSourcesSelect<false> | ReferralSourcesSelect<true>;
    'referral-source-types': ReferralSourceTypesSelect<false> | ReferralSourceTypesSelect<true>;
    services: ServicesSelect<false> | ServicesSelect<true>;
    testimonials: TestimonialsSelect<false> | TestimonialsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogPosts".
 */
export interface BlogPost {
  id: string;
  title: string;
  slug: string;
  featuredImage: string | Media;
  status: 'draft' | 'published';
  publishedDate: string;
  author: string | User;
  categories?:
    | {
        category: string;
        id?: string | null;
      }[]
    | null;
  summary: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPrograms?: (string | ProgramType)[] | null;
  relatedServices?: (string | Service)[] | null;
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?:
      | {
          keyword?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  firstName: string;
  lastName: string;
  roles: ('admin' | 'public')[];
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "programTypes".
 */
export interface ProgramType {
  id: string;
  title: string;
  slug: string;
  subtitle?: string | null;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  heroImage: string | Media;
  shortDescription: string;
  icon?: string | null;
  featuredTestimonials?: (string | Testimonial)[] | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?:
      | {
          keyword?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  callToAction: {
    text: string;
    url: string;
    style?: ('primary' | 'secondary') | null;
  };
  additionalContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials".
 */
export interface Testimonial {
  id: string;
  name: string;
  title: string;
  location?: string | null;
  quote: string;
  fullTestimonial?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  image?: (string | null) | Media;
  featured?: boolean | null;
  date?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services".
 */
export interface Service {
  id: string;
  title: string;
  slug: string;
  programType: string | ProgramType;
  heroImage: string | Media;
  summary: string;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  benefits?:
    | {
        title: string;
        description: string;
        icon?: string | null;
        id?: string | null;
      }[]
    | null;
  features?:
    | {
        title: string;
        description: string;
        icon?: string | null;
        id?: string | null;
      }[]
    | null;
  programDetails: {
    duration: string;
    format?:
      | {
          formatType?: string | null;
          id?: string | null;
        }[]
      | null;
    schedule?: string | null;
    certification?: string | null;
    requirements?:
      | {
          requirement?: string | null;
          id?: string | null;
        }[]
      | null;
    pricing?: string | null;
  };
  faqs?:
    | {
        question: string;
        answer: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        id?: string | null;
      }[]
    | null;
  testimonials?: (string | Testimonial)[] | null;
  relatedServices?: (string | Service)[] | null;
  availability?: {
    locations?: (string | Location)[] | null;
    notes?: string | null;
  };
  callToAction: {
    text: string;
    url: string;
    style?: ('primary' | 'secondary') | null;
  };
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?:
      | {
          keyword?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations".
 */
export interface Location {
  id: string;
  name: string;
  slug: string;
  type: 'state' | 'county' | 'city';
  parent?: (string | null) | Location;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  heroImage?: (string | null) | Media;
  services?: (string | Service)[] | null;
  address?: {
    street?: string | null;
    city?: string | null;
    state?: string | null;
    zipCode?: string | null;
  };
  contactInformation?: {
    phone?: string | null;
    email?: string | null;
    hours?: string | null;
  };
  localPartners?:
    | {
        name: string;
        role?: string | null;
        contact?: string | null;
        id?: string | null;
      }[]
    | null;
  localRequirements?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  testimonials?: (string | Testimonial)[] | null;
  faqs?:
    | {
        question: string;
        answer: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    keywords?:
      | {
          keyword?: string | null;
          id?: string | null;
        }[]
      | null;
    localKeywords?:
      | {
          keyword?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Define scheduled blocks of classes for groups of programs.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "classes".
 */
export interface Class {
  id: string;
  programGroup: string | ProgramGroup;
  /**
   * How many instances of this class run simultaneously at this time.
   */
  numberOfParallelClasses: number;
  day: 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday' | 'Sunday';
  /**
   * Start time of the class block.
   */
  time:
    | '00:00'
    | '00:30'
    | '01:00'
    | '01:30'
    | '02:00'
    | '02:30'
    | '03:00'
    | '03:30'
    | '04:00'
    | '04:30'
    | '05:00'
    | '05:30'
    | '06:00'
    | '06:30'
    | '07:00'
    | '07:30'
    | '08:00'
    | '08:30'
    | '09:00'
    | '09:30'
    | '10:00'
    | '10:30'
    | '11:00'
    | '11:30'
    | '12:00'
    | '12:30'
    | '13:00'
    | '13:30'
    | '14:00'
    | '14:30'
    | '15:00'
    | '15:30'
    | '16:00'
    | '16:30'
    | '17:00'
    | '17:30'
    | '18:00'
    | '18:30'
    | '19:00'
    | '19:30'
    | '20:00'
    | '20:30'
    | '21:00'
    | '21:30'
    | '22:00'
    | '22:30'
    | '23:00'
    | '23:30';
  /**
   * Select if this class block is gender-specific.
   */
  genderSpecific?: ('male' | 'female') | null;
  /**
   * Clients currently enrolled in this class block.
   */
  clients?: (string | Client)[] | null;
  /**
   * Calculated: Number of Parallel Classes * Spots Per Class Instance (from Program Group).
   */
  spotsTotal?: number | null;
  /**
   * Calculated: Spots Total - Number of Enrolled Clients.
   */
  spotsAvailable?: number | null;
  classBlockIdentifier?: string | null;
  /**
   * Active class blocks are available for enrollment selection.
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Define groups of programs that share class slots and capacity.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "program-groups".
 */
export interface ProgramGroup {
  id: string;
  /**
   * Descriptive name for the group (e.g., "Level 1 Programs")
   */
  name: string;
  /**
   * A unique code for this group used in scheduling (e.g., "L1_SHARED")
   */
  sharedProgramId: string;
  /**
   * Max clients in one class instance belonging to this group.
   */
  spotsPerClassInstance: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clients".
 */
export interface Client {
  id: string;
  publicId?: string | null;
  firstName: string;
  lastName: string;
  email?: string | null;
  phone?: string | null;
  city?: string | null;
  state?: string | null;
  zipcode?: string | null;
  sex?: ('Male' | 'Female') | null;
  /**
   * Select the client's county of residence or use the "Other" field
   */
  county?: (string | null) | County;
  /**
   * If county not in the list, specify the name here
   */
  countyOther?: string | null;
  consentToContact?: boolean | null;
  /**
   * Select the agency that referred this client or use the "Other" field
   */
  referralSource?: (string | null) | ReferralSource;
  /**
   * If referral source not in the list, specify here
   */
  referralSourceOther?: string | null;
  whyReferred?: string | null;
  /**
   * The program the client is enrolled in
   */
  selectedProgram?: (string | null) | Program;
  agreedToTerms?: boolean | null;
  signature?: string | null;
  paymentOption?: ('pay_as_you_go' | 'autopay_weekly' | 'full_program') | null;
  agreeToRecurring?: boolean | null;
  enrollmentProcessStatus?:
    | (
        | 'contact_info_collected'
        | 'program_info_collected'
        | 'schedule_selected'
        | 'consent_agreed'
        | 'final_data_collected_pending_payment'
        | 'enrollment_complete'
      )
    | null;
  enrollmentDate?: string | null;
  paymentStatus?:
    | (
        | 'pending_enrollment_fee'
        | 'active_paid_enrollment_fee'
        | 'pending_subscription_setup'
        | 'active_autopay'
        | 'active_paid_full'
        | 'payment_issue'
        | 'completed'
        | 'on_hold'
        | 'cancelled'
      )
    | null;
  squareCustomerId?: string | null;
  squareSubscriptionId?: string | null;
  /**
   * Notes for internal admin use only.
   */
  internalNotes?: string | null;
  /**
   * The specific class block this client is currently assigned to.
   */
  class?: (string | null) | Class;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "counties".
 */
export interface County {
  id: string;
  name: string;
  /**
   * Active counties can be selected during enrollment.
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Specific referral sources combining county and type (e.g., York PPP)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "referral-sources".
 */
export interface ReferralSource {
  id: string;
  /**
   * The county this referral source is located in
   */
  county: string | County;
  /**
   * The type of referral source (e.g., PPP, DSS, PTI)
   */
  sourceType: string | ReferralSourceType;
  title?: string | null;
  contactInfo?: {
    /**
     * Primary contact person at this referral source
     */
    contactName?: string | null;
    email?: string | null;
    phone?: string | null;
  };
  /**
   * Any special requirements or procedures for this specific referral source
   */
  notes?: string | null;
  /**
   * Active referral sources can be selected during enrollment
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "referral-source-types".
 */
export interface ReferralSourceType {
  id: string;
  /**
   * Full name of the referral source type (e.g., "Probation Pardon & Parole")
   */
  name: string;
  /**
   * Common abbreviation (e.g., "PPP")
   */
  abbreviation: string;
  /**
   * Active referral source types can be selected during enrollment.
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Define the programs offered, their structure, and pricing.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "programs".
 */
export interface Program {
  id: string;
  /**
   * A unique code for this program (e.g., dv_male, am, sort). This is used for linking.
   */
  programId: string;
  name: string;
  description?: string | null;
  durationText?: string | null;
  weeks?: number | null;
  sessionsPerWeek?: number | null;
  costPerSession: number;
  enrollmentFee: number;
  /**
   * Link to the program group that defines shared class capacity.
   */
  programGroup: string | ProgramGroup;
  /**
   * Categorize the program for filtering or display purposes.
   */
  programCategory?: ('court_ordered' | 'college_university' | 'corporate_hospital' | 'general_wellness') | null;
  /**
   * Active programs can be selected during enrollment.
   */
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Records of financial transactions, primarily from Square.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payments".
 */
export interface Payment {
  id: string;
  client: string | Client;
  program?: (string | null) | Program;
  /**
   * The unique ID of the payment from Square.
   */
  squarePaymentId?: string | null;
  /**
   * The unique ID of the subscription from Square, if this payment is for one.
   */
  squareSubscriptionId?: string | null;
  /**
   * The Square Customer ID associated with this payment.
   */
  squareCustomerId?: string | null;
  /**
   * Payment amount in currency units (e.g., dollars). Assumed to be in the system currency (e.g., USD).
   */
  amount: number;
  /**
   * Currency code (e.g., USD).
   */
  currency: string;
  /**
   * The status of the payment (e.g., COMPLETED, FAILED, PENDING). Often from Square.
   */
  status: string;
  /**
   * The date and time the payment was processed.
   */
  paymentDate: string;
  /**
   * The nature of the payment.
   */
  type: 'enrollment_fee' | 'session_fee_subscription' | 'session_fee_payg' | 'program_fee_pif' | 'refund' | 'other';
  /**
   * e.g., Square Online, Manual Offline, Check
   */
  paymentMethod?: string | null;
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'blogPosts';
        value: string | BlogPost;
      } | null)
    | ({
        relationTo: 'classes';
        value: string | Class;
      } | null)
    | ({
        relationTo: 'clients';
        value: string | Client;
      } | null)
    | ({
        relationTo: 'counties';
        value: string | County;
      } | null)
    | ({
        relationTo: 'locations';
        value: string | Location;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'payments';
        value: string | Payment;
      } | null)
    | ({
        relationTo: 'program-groups';
        value: string | ProgramGroup;
      } | null)
    | ({
        relationTo: 'programTypes';
        value: string | ProgramType;
      } | null)
    | ({
        relationTo: 'programs';
        value: string | Program;
      } | null)
    | ({
        relationTo: 'referral-sources';
        value: string | ReferralSource;
      } | null)
    | ({
        relationTo: 'referral-source-types';
        value: string | ReferralSourceType;
      } | null)
    | ({
        relationTo: 'services';
        value: string | Service;
      } | null)
    | ({
        relationTo: 'testimonials';
        value: string | Testimonial;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogPosts_select".
 */
export interface BlogPostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  featuredImage?: T;
  status?: T;
  publishedDate?: T;
  author?: T;
  categories?:
    | T
    | {
        category?: T;
        id?: T;
      };
  summary?: T;
  content?: T;
  relatedPrograms?: T;
  relatedServices?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?:
          | T
          | {
              keyword?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "classes_select".
 */
export interface ClassesSelect<T extends boolean = true> {
  programGroup?: T;
  numberOfParallelClasses?: T;
  day?: T;
  time?: T;
  genderSpecific?: T;
  clients?: T;
  spotsTotal?: T;
  spotsAvailable?: T;
  classBlockIdentifier?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clients_select".
 */
export interface ClientsSelect<T extends boolean = true> {
  publicId?: T;
  firstName?: T;
  lastName?: T;
  email?: T;
  phone?: T;
  city?: T;
  state?: T;
  zipcode?: T;
  sex?: T;
  county?: T;
  countyOther?: T;
  consentToContact?: T;
  referralSource?: T;
  referralSourceOther?: T;
  whyReferred?: T;
  selectedProgram?: T;
  agreedToTerms?: T;
  signature?: T;
  paymentOption?: T;
  agreeToRecurring?: T;
  enrollmentProcessStatus?: T;
  enrollmentDate?: T;
  paymentStatus?: T;
  squareCustomerId?: T;
  squareSubscriptionId?: T;
  internalNotes?: T;
  class?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "counties_select".
 */
export interface CountiesSelect<T extends boolean = true> {
  name?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations_select".
 */
export interface LocationsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  type?: T;
  parent?: T;
  description?: T;
  heroImage?: T;
  services?: T;
  address?:
    | T
    | {
        street?: T;
        city?: T;
        state?: T;
        zipCode?: T;
      };
  contactInformation?:
    | T
    | {
        phone?: T;
        email?: T;
        hours?: T;
      };
  localPartners?:
    | T
    | {
        name?: T;
        role?: T;
        contact?: T;
        id?: T;
      };
  localRequirements?: T;
  testimonials?: T;
  faqs?:
    | T
    | {
        question?: T;
        answer?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?:
          | T
          | {
              keyword?: T;
              id?: T;
            };
        localKeywords?:
          | T
          | {
              keyword?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payments_select".
 */
export interface PaymentsSelect<T extends boolean = true> {
  client?: T;
  program?: T;
  squarePaymentId?: T;
  squareSubscriptionId?: T;
  squareCustomerId?: T;
  amount?: T;
  currency?: T;
  status?: T;
  paymentDate?: T;
  type?: T;
  paymentMethod?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "program-groups_select".
 */
export interface ProgramGroupsSelect<T extends boolean = true> {
  name?: T;
  sharedProgramId?: T;
  spotsPerClassInstance?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "programTypes_select".
 */
export interface ProgramTypesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  subtitle?: T;
  description?: T;
  heroImage?: T;
  shortDescription?: T;
  icon?: T;
  featuredTestimonials?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?:
          | T
          | {
              keyword?: T;
              id?: T;
            };
      };
  callToAction?:
    | T
    | {
        text?: T;
        url?: T;
        style?: T;
      };
  additionalContent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "programs_select".
 */
export interface ProgramsSelect<T extends boolean = true> {
  programId?: T;
  name?: T;
  description?: T;
  durationText?: T;
  weeks?: T;
  sessionsPerWeek?: T;
  costPerSession?: T;
  enrollmentFee?: T;
  programGroup?: T;
  programCategory?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "referral-sources_select".
 */
export interface ReferralSourcesSelect<T extends boolean = true> {
  county?: T;
  sourceType?: T;
  title?: T;
  contactInfo?:
    | T
    | {
        contactName?: T;
        email?: T;
        phone?: T;
      };
  notes?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "referral-source-types_select".
 */
export interface ReferralSourceTypesSelect<T extends boolean = true> {
  name?: T;
  abbreviation?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services_select".
 */
export interface ServicesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  programType?: T;
  heroImage?: T;
  summary?: T;
  description?: T;
  benefits?:
    | T
    | {
        title?: T;
        description?: T;
        icon?: T;
        id?: T;
      };
  features?:
    | T
    | {
        title?: T;
        description?: T;
        icon?: T;
        id?: T;
      };
  programDetails?:
    | T
    | {
        duration?: T;
        format?:
          | T
          | {
              formatType?: T;
              id?: T;
            };
        schedule?: T;
        certification?: T;
        requirements?:
          | T
          | {
              requirement?: T;
              id?: T;
            };
        pricing?: T;
      };
  faqs?:
    | T
    | {
        question?: T;
        answer?: T;
        id?: T;
      };
  testimonials?: T;
  relatedServices?: T;
  availability?:
    | T
    | {
        locations?: T;
        notes?: T;
      };
  callToAction?:
    | T
    | {
        text?: T;
        url?: T;
        style?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?:
          | T
          | {
              keyword?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials_select".
 */
export interface TestimonialsSelect<T extends boolean = true> {
  name?: T;
  title?: T;
  location?: T;
  quote?: T;
  fullTestimonial?: T;
  image?: T;
  featured?: T;
  date?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  roles?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}